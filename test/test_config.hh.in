/*
 * Copyright (C) 2017 Open Source Robotics Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
*/

#ifndef SDF_TEST_CONFIG_HH_
#define SDF_TEST_CONFIG_HH_

#include <gz/utils/Environment.hh>

#include <sdf/Filesystem.hh>

#cmakedefine PROJECT_SOURCE_DIR "@PROJECT_SOURCE_DIR@"
#cmakedefine PROJECT_BINARY_DIR "@PROJECT_BINARY_DIR@"

#ifdef PROJECT_SOURCE_DIR
constexpr const char* kProjectSourceDir = PROJECT_SOURCE_DIR;
#else
constexpr const char* kProjectSourceDir = "";
#endif

#ifdef PROJECT_BINARY_DIR
constexpr const char* kProjectBinaryDir = PROJECT_BINARY_DIR;
#else
constexpr const char* kProjectBinaryDir= "";
#endif

namespace sdf
{
  namespace testing
  {
    /// \brief Method to retrieve root directory of project source
    ///
    /// This is used to get various test files
    /// \param[inout] _sourceDir Full path to the source directory
    /// \return True if directory is set correctly, false otherwise
    bool ProjectSourcePath(std::string &_sourceDir)
    {
      std::string bazel_path;
      // Bazel builds set TEST_SRCDIR
      if(gz::utils::env("TEST_SRCDIR", _sourceDir) &&
         gz::utils::env("GZ_BAZEL_PATH", bazel_path))
      {
        _sourceDir = sdf::filesystem::append(
            _sourceDir, "gz", bazel_path);
        return true;
      }
      else
      {
        _sourceDir = kProjectSourceDir;
        return true;
      }

      return false;
    }

    /// \brief Method to retrieve temporary directory for test outputs
    ///
    /// \param[inout] _tmpDir Full path to the temp directory
    /// \return True if directory is set correctly, false otherwise
    bool TestTmpPath(std::string &_tmpDir)
    {
      // Bazel builds set TEST_UNDECLARED_OUTPUTS_DIR
      if (gz::utils::env("TEST_UNDECLARED_OUTPUTS_DIR", _tmpDir))
      {
        return true;
      }
      else
      {
        _tmpDir = sdf::filesystem::append(kProjectBinaryDir, "sdf-tmp");
        sdf::filesystem::create_directory(_tmpDir);
        return true;
      }
    }

    /// \brief Method to retrieve temporary home directory for tests
    ///
    /// This will update the contents of the home directory path variable
    /// (HOME on Linux/MacOS, HOMEPATH on Windows) to this newly-set
    /// directory
    /// This additionally sets the HOME and HOMEPATH environment variables
    ///
    /// \param[inout] _homeDir Full path to the home directory
    /// \return True if directory is set correctly, false otherwise
    bool TestSetHomePath(std::string &_homeDir)
    {
      if (gz::utils::env("TEST_UNDECLARED_OUTPUTS_DIR", _homeDir))
      {
        return true;
      }
      else
      {
        _homeDir = kProjectBinaryDir;
        // Set both for linux and windows
        return gz::utils::setenv("HOME", _homeDir) &&
               gz::utils::setenv("HOMEPATH", _homeDir);
      }
    }

    /// \brief Retrieve a file from the project source directory
    /// \param[in] variable length of arguments relative to the
    ///   repository source directory
    /// \return Full path to requested file
    template <typename... Args>
    std::string SourceFile(Args const &... args)
    {
      std::string dataDir;
      ProjectSourcePath(dataDir);
      return sdf::filesystem::append(dataDir, args...);
    }

    /// \brief Retrieve a file from the test directory
    /// \param[in] variable length of arguments relative to the
    ///   repository test directory
    /// \return Full path to requested test file
    template <typename... Args>
    std::string TestFile(Args const &... args)
    {
      return SourceFile("test", args...);
    }

  }  // namespace testing
}  // namespace sdf

#endif
