#usda 1.0
(
    upAxis = "Z"
)

def "double_pendulum"
{
    def PhysicsScene "physics"
    {
    }

    def Xform "ground_plane"
    {
        float3 xformOp:rotateXYZ = (0, 0, 0)
        double3 xformOp:translate = (0, 0, -0.125)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]

        def Xform "link" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            float physics:mass = 1
            float3 xformOp:rotateXYZ = (0, 0, 0)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]

            def Xform "visual"
            {
                float3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]

                def Cube "geometry"
                {
                    float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                    rel material:binding = </Looks/Material_0>
                    double size = 1
                    float3 xformOp:scale = (100, 100, 0.25)
                    uniform token[] xformOpOrder = ["xformOp:scale"]
                }
            }
        }
    }

    def Xform "double_pendulum_with_base"
    {
        float3 xformOp:rotateXYZ = (0, 0, 0)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]

        def Xform "base" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            float physics:mass = 100
            float3 xformOp:rotateXYZ = (0, 0, 0)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]

            def Xform "vis_plate_on_ground"
            {
                float3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:translate = (0, 0, 0.01)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]

                def Cylinder "geometry"
                {
                    float3[] extent = [(-0.8, -0.8, -0.01), (0.8, 0.8, 0.01)]
                    double height = 0.02
                    rel material:binding = </Looks/Material_1>
                    double radius = 0.8
                }
            }

            def Xform "vis_pole"
            {
                float3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:translate = (-0.275, 0, 1.1)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]

                def Cube "geometry"
                {
                    float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                    rel material:binding = </Looks/Material_2>
                    double size = 1
                    float3 xformOp:scale = (0.2, 0.2, 2.2)
                    uniform token[] xformOpOrder = ["xformOp:scale"]
                }
            }
        }

        def Xform "upper_link" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            float physics:mass = 1
            float3 xformOp:rotateXYZ = (-90.00021, 0, 0)
            double3 xformOp:translate = (0, 0, 2.1)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]

            def Xform "vis_upper_joint"
            {
                float3 xformOp:rotateXYZ = (180, 89.99979, 180)
                double3 xformOp:translate = (-0.05, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]

                def Cylinder "geometry"
                {
                    float3[] extent = [(-0.1, -0.1, -0.15), (0.1, 0.1, 0.15)]
                    double height = 0.3
                    rel material:binding = </Looks/Material_3>
                    double radius = 0.1
                }
            }

            def Xform "vis_lower_joint"
            {
                float3 xformOp:rotateXYZ = (180, 89.99979, 180)
                double3 xformOp:translate = (0, 0, 1)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]

                def Cylinder "geometry"
                {
                    float3[] extent = [(-0.1, -0.1, -0.1), (0.1, 0.1, 0.1)]
                    double height = 0.2
                    rel material:binding = </Looks/Material_4>
                    double radius = 0.1
                }
            }

            def Xform "vis_cylinder"
            {
                float3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:translate = (0, 0, 0.5)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]

                def Cylinder "geometry"
                {
                    float3[] extent = [(-0.1, -0.1, -0.45), (0.1, 0.1, 0.45)]
                    double height = 0.9
                    rel material:binding = </Looks/Material_5>
                    double radius = 0.1
                }
            }
        }

        def Xform "lower_link" (
            prepend apiSchemas = ["PhysicsMassAPI"]
        )
        {
            float physics:mass = 1
            float3 xformOp:rotateXYZ = (-114.59156, 0, 0)
            double3 xformOp:translate = (0.25, 1, 2.1)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]

            def Xform "vis_lower_joint"
            {
                float3 xformOp:rotateXYZ = (180, 89.99979, 180)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]

                def Cylinder "geometry"
                {
                    float3[] extent = [(-0.08, -0.08, -0.15), (0.08, 0.08, 0.15)]
                    double height = 0.3
                    rel material:binding = </Looks/Material_6>
                    double radius = 0.08
                }
            }

            def Xform "vis_cylinder"
            {
                float3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:translate = (0, 0, 0.5)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]

                def Cylinder "geometry"
                {
                    float3[] extent = [(-0.1, -0.1, -0.45), (0.1, 0.1, 0.45)]
                    double height = 0.9
                    rel material:binding = </Looks/Material_7>
                    double radius = 0.1
                }
            }
        }

        def PhysicsRevoluteJoint "upper_joint"
        {
            uniform token physics:axis = "X"
            prepend rel physics:body0 = </double_pendulum/double_pendulum_with_base/base>
            prepend rel physics:body1 = </double_pendulum/double_pendulum_with_base/upper_link>
            point3f physics:localPos0 = (0, 0, 2.1)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.70710546, -0.7071081, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physics:lowerLimit = -5.729578e17
            float physics:upperLimit = 5.729578e17
        }

        def PhysicsRevoluteJoint "lower"
        {
            uniform token physics:axis = "X"
            prepend rel physics:body0 = </double_pendulum/double_pendulum_with_base/upper_link>
            prepend rel physics:body1 = </double_pendulum/double_pendulum_with_base/lower_link>
            point3f physics:localPos0 = (0.25, -0.0000036732051, 1)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.9770616, -0.21295662, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physics:lowerLimit = -5.729578e17
            float physics:upperLimit = 5.729578e17
        }
    }
}

def Scope "Looks"
{
    def Material "Material_0"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_0/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_0/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_0/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (0.8, 0.8, 0.8) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            token outputs:out
        }
    }

    def Material "Material_1"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_1/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_1/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_1/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (0.8, 0.8, 0.8) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            token outputs:out
        }
    }

    def Material "Material_2"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_2/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_2/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_2/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (0.8, 0.8, 0.8) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            token outputs:out
        }
    }

    def Material "Material_3"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_3/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_3/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_3/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (0.8, 0.8, 0.8) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            token outputs:out
        }
    }

    def Material "Material_4"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_4/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_4/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_4/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (0.8, 0.8, 0.8) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            token outputs:out
        }
    }

    def Material "Material_5"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_5/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_5/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_5/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (0.8, 0.8, 0.8) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            token outputs:out
        }
    }

    def Material "Material_6"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_6/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_6/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_6/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (0.8, 0.8, 0.8) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            token outputs:out
        }
    }

    def Material "Material_7"
    {
        token outputs:mdl:displacement.connect = </Looks/Material_7/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Material_7/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Material_7/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            color3f inputs:diffuse_color_constant = (0.8, 0.8, 0.8) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Albedo"
                displayName = "Base Color"
                doc = "This is the base color"
            )
            color3f inputs:emissive_color = (0, 0, 0) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (100000, 100000, 100000)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
            )
            float inputs:emissive_intensity = 1 (
                customData = {
                    int default = 40
                    dictionary range = {
                        int max = 100000
                        int min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    int default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emissive"
                doc = "Enables the emission of light from the material"
            )
            token outputs:out
        }
    }
}
